#version 460 core

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;


struct Tile
{
    float xpos;
    float ypos;
    float zpos;
    /* 
        0 = 그냥
        1 = 충돌
        2 = 사라짐
     */
    float state;
};

// SSBO
layout(std430, binding = 1) buffer TileBuffer
{
    Tile tileData[];
};





struct OutputData
{
    float HasCharCollision;

    // -1 or +1 으로 토글
    float HasWriteColTile;
    float HasInformColTile;
    float HasInformDisTile;
    
    uint WriteColTile;
    uint InformColTile;
    uint InformDisTile;
};

layout(std430, binding = 2) buffer OutputBuffer
{
    OutputData outputdata;
};




uniform uint TileCount;
uniform vec3 TileScale;
uniform vec3 CharScale;

uniform vec3 MainCharPos;




void main()
{
    // ssbo 에 접근하는 스레드의 인덱스
    uint Index = gl_GlobalInvocationID.x;

    // 대응되는 데이터가 없으면 종료
    if(Index >= TileCount) return;



    // 현재 스레드가 담당하는 타일
    Tile curTile = tileData[Index];

        // 가장 먼저 output 버퍼를 통해서, 갱신해야 하는 정보가 있는 지 확인한다
        // 충돌 타일 인덱스가 업데이트 됐다면
        if(outputdata.HasInformColTile == +1.0f)
        {
            // 자신과 같으면 갱신
            if(outputdata.InformColTile == Index)
            {
                // 이제 충돌 상태
                curTile.state = 1.0f;

                // 갱신하는 스레드가 output 버퍼를 초기화 시킨다
                outputdata.HasInformColTile = -1.0f;
            }
        }

        // 사라지는 타일 인덱스가 업데이트 됐다면
        if(outputdata.HasInformDisTile == +1.0f)
        {
            if(outputdata.InformDisTile == Index)
            {
                // 이제 사라진 상태
                curTile.state = 2.0f;

                outputdata.HasInformDisTile = -1.0f;
            }
        }

        
        // 사라진 타일이라면 더이상 진행하지 않는다
        if(curTile.state == 2.0f)
        {
            tileData[Index] = curTile;
            return;
        }


        // 충돌 판정 => 메인 캐릭터가 타일을 밟는 경우에 대해서만 판정하자
        bool result = true;


        // 캐릭터가 밑에 있다면 밟는 상황이 아니다
        if(MainCharPos.y < curTile.ypos) result = false;

        // x, y, z 축 중 하나라도 떨어져 있다면 충돌 상황이 아니다
             if(abs(MainCharPos.x - curTile.xpos) > (CharScale.x * 0.5f + TileScale.x * 0.5f)) result = false;
        else if(abs(MainCharPos.y - curTile.ypos) > (CharScale.y * 0.5f + TileScale.y * 0.5f)) result = false;
        else if(abs(MainCharPos.z - curTile.zpos) > (CharScale.z * 0.5f + TileScale.z * 0.5f)) result = false;


        // 충돌한 경우 => 일단 메인 캐릭터는 멈추게 된다
        if(result == true)
        {
            // 일단 무조건 메인 캐릭터는 멈춘다는 것을 입력
            outputdata.HasCharCollision = +1.0f;

            // 이미 충돌 상태라면, 밖에 알리지 않아도 된다
            if(curTile.state == 1.0f)
            {
                tileData[Index] = curTile;
                return;
            }
            // 충돌 상태가 아니라면, 바깥에 자신이 충돌했다고 알린다
            else
            {
                outputdata.HasWriteColTile = +1.0f;
                outputdata.WriteColTile = Index;
            }
        }

    tileData[Index] = curTile;
}